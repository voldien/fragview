#extension GL_ARB_derivative_control : enable
//#extension GL_ARB_compute_variable_group_size : disable
#extension GL_ARB_enhanced_layouts : enable
#extension GL_ARB_shader_image_load_store : enable
#extension GL_ARB_explicit_attrib_location : enable
layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(binding = 1, rgba8) uniform readonly image2D texture0;
layout(binding = 0, rgba8) uniform writeonly image2D fragColor;

void main(void) {

    // Get output fragcolor texture coordinate.
    ivec2 TexCoord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 fragSize = imageSize(fragColor);
    ivec2 TexSize = imageSize(texture0);

    // Compute sample coordinate.
    vec2 TexDiff = vec2(TexSize) / vec2(fragSize);
    ivec2 sampleTexCoord = ivec2(TexDiff * TexCoord);

    //TODO add recompute of the sample kernel coordinates.
    const ivec2 lb = ivec2(-1.0 * TexDiff.x, -1.0 * TexDiff.y);
    vec4 p00 = imageLoad(texture0, sampleTexCoord + lb);
    const ivec2 b = ivec2(0.0 * TexDiff.x, -1.0 * TexDiff.y);
    vec4 p10 = imageLoad(texture0, sampleTexCoord + b);
    const ivec2 rb = ivec2(1.0 * TexDiff.x, -1.0 * TexDiff.y);
    vec4 p20 = imageLoad(texture0, sampleTexCoord + rb);

    const ivec2 l = ivec2(-1.0 * TexDiff.x, 0.0 * TexDiff.y);
    vec4 p01 = imageLoad(texture0, sampleTexCoord + l);
    const ivec2 r = ivec2(1.0 * TexDiff.x, 0.0 * TexDiff.y);
    vec4 p21 = imageLoad(texture0, sampleTexCoord + r);

    const ivec2 lt = ivec2(-1.0 * TexDiff.x, 1.0 * TexDiff.y);
    vec4 p02 = imageLoad(texture0, sampleTexCoord + lt);
    const ivec2 t = ivec2(-1.0 * TexDiff.x, 1.0 * TexDiff.y);
    vec4 p12 = imageLoad(texture0, sampleTexCoord + t);
    const ivec2 rt = ivec2(1.0 * TexDiff.x, 1.0 * TexDiff.y);
    vec4 p22 = imageLoad(texture0, sampleTexCoord + rt);

    // Compute Matrix X and Y.
    vec3 gx = -p00.xyz + p20.xyz + 2.0f * (p21.xyz - p01.xyz) - p02.xyz + p22.xyz;
    vec3 gy = -p00.xyz - p20.xyz + 2.0f * (p12.xyz - p10.xyz) + p02.xyz + p22.xyz;

    // Compute the final.
    vec3 g = sqrt(gx * gx + gy * gy);

    imageStore(fragColor, TexCoord, vec4(g.rgb, 1.0));
}
